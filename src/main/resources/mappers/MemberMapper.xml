<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="MemberMapper">
	<resultMap id="member" type="com.gaimit.mlm.model.Member">
		<result property="id" column="id"/>
		<result property="idLib" column="id_lib"/>
		<result property="userId" column="user_id"/>
		<result property="userPw" column="user_pw"/>
		<result property="name" column="name"/>
		<result property="phone" column="phone"/>
		<result property="otherContact" column="other_contact"/>
		<result property="birthdate" column="birthdate"/>
		<result property="email" column="email"/>
		<result property="postcode" column="postcode"/>
		<result property="addr1" column="addr1"/>
		<result property="addr2" column="addr2"/>
		<result property="remarks" column="remarks"/>
		<result property="regDate" column="reg_date"/>
		<result property="editDate" column="edit_date"/>
		<result property="barcodeMbr" column="barcode_mbr"/>
		<result property="profileImg" column="profile_img"/>
		<result property="rfUid" column="rf_uid"/>
		<result property="status" column="status"/>
		<!-- 회원분류 관련인데 member 테이블 -->
		<result property="classId" column="class_id"/>
		<!-- 회원등급관련 -->
		<result property="gradeId" column="grade_id"/>
		<result property="gradeName" column="grade_name"/>
		<result property="brwLimit" column="brw_limit"/>
		<result property="dateLimit" column="date_limit"/>
		<result property="standard" column="standard"/>
		<!-- 도서관 이름 -->
		<result property="nameLib" column="name_lib"/>
		<!-- 회원 반 분류 -->
		<result property="idMbrClass" column="id_mbr_class"/>
		<result property="className" column="class_name"/>
	</resultMap>
	
	<!-- 아이디 중복검사를 수행한다 -->
	<!-- <select id="selectUserIdCount" parameterType="com.gaimit.mlm.model.Member" resultType="int">
		SELECT count(id) FROM member WHERE user_id=#{userId}
	</select> -->
	
	<!-- 이메일 중복 검사를 수행한다 -->
	<!-- <select id="selectEmailCount" parameterType="com.gaimit.mlm.model.Member" resultType="int">
		SELECT count(id) FROM member WHERE email=#{email}
	</select> -->
	
	<!-- 마지막 회원아이디(숫자)를 확인한다. -->
	<!-- <select id="selectLastJoinedId" parameterType="com.gaimit.mlm.model.Member" resultType="int">
		SELECT MAX(id) FROM member
	</select> -->
	
	<!-- 회원정보 목록 조회 -->
	<!-- <select id="selectMemberList" parameterType="com.gaimit.mlm.model.Member" resultMap="member">
		SELECT
			id, id_lib, name, phone, level
		FROM member
		ORDER BY id ASC
	</select> -->
	
	<!-- 회원정보 목록 조회 -->
	<!-- getMemberListByLib -->
	<select id="selectMemberListByLib" parameterType="com.gaimit.mlm.model.Member" resultMap="member">
		SELECT
			id, m.id_lib, name, phone, other_contact, birthdate, email, postcode, addr1, addr2,
			remarks, reg_date, barcode_mbr, rf_uid, m.grade_id, grade_name,
			brw_limit, date_limit, class_name
		FROM member m
		INNER JOIN member_grade g ON m.grade_id = g.grade_id
		LEFT OUTER JOIN member_class c ON m.class_id = c.id_mbr_class
		WHERE m.id_lib=#{idLib} AND status = 1
		<if test="(name != null) and (name != '')">
			AND name LIKE concat('%', #{name}, '%')
		</if>
		<if test="(className != null) and (className != '')">
			AND class_name LIKE concat('%', #{className}, '%')
		</if>
		<choose>
			<!-- int로 받는 classId는 값이 없으면 0, 음수, 양수 값이된다. -->
			<!-- 양수 값이면, 해당 값을 찾아가고 -->
			<!-- 음수 값이면, 분류가 설정되지 않은 인원만 찾는다. -->
			<!-- 0일 경우 아무것도 하지 않는 전체 목록을 가져온다. -->
			<when test="classId gt 0">
				AND class_id = #{classId}
			</when>
			<when test="classId lt 0">
				AND class_id IS NULL
			</when>
			<otherwise>
				<!-- 아무것도 하지 않음. -->
			</otherwise>
		</choose>
		ORDER BY id DESC
		LIMIT #{limitStart}, #{listCount}
	</select>
	
		<!-- 회원 목록 엑셀화에 쓰이는 쿼리 -->
	<select id="selectMemberListToExcel" parameterType="com.gaimit.mlm.model.Member" resultMap="member">
		SELECT
			id, m.id_lib, name, phone, other_contact, birthdate, email, postcode, addr1, addr2,
			remarks, reg_date, barcode_mbr, rf_uid, m.grade_id, grade_name,
			brw_limit, date_limit, class_name
		FROM member m
		INNER JOIN member_grade g ON m.grade_id = g.grade_id
		LEFT OUTER JOIN member_class c ON m.class_id = c.id_mbr_class
		WHERE m.id_lib=#{idLib} AND status = 1
		<if test="(name != null) and (name != '')">
			AND name LIKE concat('%', #{name}, '%')
		</if>
		<if test="(className != null) and (className != '')">
			AND class_name LIKE concat('%', #{className}, '%')
		</if>
		<choose>
			<!-- int로 받는 classId는 값이 없으면 0, 음수, 양수 값이된다. -->
			<!-- 양수 값이면, 해당 값을 찾아가고 -->
			<!-- 음수 값이면, 분류가 설정되지 않은 인원만 찾는다. -->
			<!-- 0일 경우 아무것도 하지 않는 전체 목록을 가져온다. -->
			<when test="classId gt 0">
				AND class_id = #{classId}
			</when>
			<when test="classId lt 0">
				AND class_id IS NULL
			</when>
			<otherwise>
				<!-- 아무것도 하지 않음. -->
			</otherwise>
		</choose>
		ORDER BY name ASC
	</select>
	
	
	
	<!-- 회원정보 목록 조회 회원증 그냥 전체 인쇄할 때 -->
	<select id="selectMemberListAllForPrint" parameterType="com.gaimit.mlm.model.Member" resultMap="member">
		SELECT
			id, m.id_lib, name, phone, birthdate, email, postcode, addr1, addr2,
			remarks, reg_date, barcode_mbr, rf_uid, m.grade_id, grade_name,
			brw_limit, date_limit, class_name
		FROM member m
		INNER JOIN member_grade g ON m.grade_id = g.grade_id
		LEFT OUTER JOIN member_class c ON m.class_id = c.id_mbr_class
		WHERE m.id_lib=#{idLib} AND status = 1
		ORDER BY class_name ASC, name ASC
	</select>
	
	<!-- 회원 이름과 도서관 번호로 목록 조회 -->
	<select id="selectMemberListByLibAndName" parameterType="com.gaimit.mlm.model.Member" resultMap="member">
		SELECT
			id, m.id_lib, m.name, phone, g.grade_id, barcode_mbr, grade_name,
			brw_limit, date_limit
		FROM member m
		INNER JOIN member_grade g
		ON m.grade_id = g.grade_id
		WHERE m.id_lib=#{idLib}
		<if test="name != null">
			AND name LIKE concat('%', #{name}, '%')
		</if>
		ORDER BY id ASC
	</select>
	
	<!-- 일련번호에 의한 회원정보 조회 -->
	<select id="selectMember" parameterType="com.gaimit.mlm.model.Member" resultMap="member">
		SELECT
			id, m.id_lib, m.name, phone, other_contact, birthdate, email, postcode,
			addr1, addr2, remarks, reg_date, barcode_mbr, profile_img,
			rf_uid,
			g.grade_id, grade_name, class_id, c.class_name,
			brw_limit, date_limit
		FROM member m
		INNER JOIN member_grade g ON m.grade_id = g.grade_id
		LEFT OUTER JOIN member_class c ON m.class_id = c.id_mbr_class
		WHERE m.id_lib=#{idLib} AND id=#{id}
	</select>
	
	<!-- 선수목록 전체 데이터 수 얻기 getMemberCount 
	 MemberList.java 에서 사용 -->
	<select id="selectMemberCount" parameterType="com.gaimit.mlm.model.Member"
		resultType="int">
		SElECT count(id)
		FROM member m
		LEFT OUTER JOIN member_class c ON m.class_id = c.id_mbr_class
		WHERE m.id_lib=#{idLib} AND status = 1
		<if test="(name != null) and (name != '')">
			AND name LIKE concat('%', #{name}, '%')
		</if>
		<if test="(className != null) and (className != '')">
			AND class_name LIKE concat('%', #{className}, '%')
		</if>
	</select>
	
	<!-- 이름과 도서관번호로 선수 데이터 수 얻기 -->
	<select id="selectMemberCountByNameAndIdLib" parameterType="com.gaimit.mlm.model.Member"
		resultType="int">
		SElECT count(id)
		FROM member
		WHERE id_lib=#{idLib} AND name=#{name}
	</select>
	
	<!-- 회원정보를 저장한다 : 가입 -->
	<insert id="insertMember" parameterType="com.gaimit.mlm.model.Member" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO member (
			id_lib, name, phone, other_contact, birthdate, email, postcode, addr1, addr2,
			remarks, reg_date, edit_date, barcode_mbr, rf_uid, grade_id, profile_img,
			class_id
		) VALUES (
			#{idLib}, #{name}, #{phone}, #{otherContact}, #{birthdate}, #{email},
			#{postcode}, #{addr1}, #{addr2}, #{remarks}, 
			<choose>
				<when test="regDate != null">
					#{regDate}
				</when>
				<otherwise>
					now()
				</otherwise>
			</choose>
			, now(),
			#{barcodeMbr}, #{rfUid}, #{gradeId}, #{profileImg},
			#{classId}
		)
	</insert>
	
	<!-- 아이디와 비밀번호가 일치하는 회원정보를 조회한다. -->
	<select id="selectLoginInfoMember" parameterType="com.gaimit.mlm.model.Member" resultMap="member">
		SELECT
			id, m.id_lib, name_lib, user_id, user_pw, name, phone,
			DATE_FORMAT(birthdate, '%Y-%m-%d') AS birthdate,
			email, postcode, addr1, addr2, remarks, reg_date, edit_date,
			barcode_mbr, profile_img, rf_uid, grade_id, status
		FROM member m
		INNER JOIN library l ON m.id_lib = l.id_lib
		WHERE user_id=#{userId} AND user_pw=password(#{userPw})
		ORDER BY id DESC
		LIMIT 0, 1
	</select>
	
	<!-- 비밀번호 재발급 : 이메일주소가 일치하는 비밀번호를 변경한다. -->
	<update id="updateMemberPasswordByEmail" parameterType="com.gaimit.mlm.model.Member">
		UPDATE member SET user_pw=password(#{userPw}), edit_date=now()
		WHERE email=#{email};
	</update>
	
	<!-- 현재 로그인 중인 회원의 비밀번호를 검사한다. -->
	<select id="selectMemberPasswordCount" >
		SELECT count(id) FROM member
		WHERE id=#{id} AND user_pw=password(#{userPw})
	</select>
	
	<!-- 회원정보를 비활성화 계정으로 변경 : 탈퇴 -->
	<update id="updateMemberInactive" parameterType="com.gaimit.mlm.model.Member">
		UPDATE member SET
			status = 2, edit_date=now()
		WHERE id=#{id} AND id_lib=#{idLib};
	</update>
	
	<!-- 회원정보를 변경한다 -->
	<update id="updateMember" parameterType="com.gaimit.mlm.model.Member">
		UPDATE member SET
			name=#{name}, email=#{email}, birthdate=#{birthdate},
			phone=#{phone}, other_contact=#{otherContact}, postcode=#{postcode}, addr1=#{addr1}, addr2=#{addr2},
			rf_uid=#{rfUid}, grade_id=#{gradeId}, class_id=#{classId},
			edit_date=now()
			
			<choose>
				<when test="profileImg == ''">
					,profile_img=null
				</when>
				<when test="profileImg != null">
					,profile_img=#{profileImg}
				</when>
			</choose>
		WHERE id=#{id} AND id_lib=#{idLib}
	</update>
	
	<select id="selectPhoneCount" parameterType="com.gaimit.mlm.model.Member" resultType="int">
		SELECT
			count(id)
		FROM member
		WHERE id_lib=#{idLib} AND phone=#{phone} AND status=1
	</select>
	
	<select id="selectGrade" parameterType="com.gaimit.mlm.model.Member" resultMap="member">
		SELECT
			grade_id, grade_name, brw_limit, date_limit, standard
		FROM member_grade
		WHERE id_lib=#{idLib}
		<if test="gradeName != null">
			AND grade_name LIKE concat('%',#{gradeName} ,'%')
		</if>
	</select>
	
	<select id="getGradeItem" parameterType="com.gaimit.mlm.model.Member" resultMap="member">
		SELECT
			grade_id, grade_name, brw_limit, date_limit, standard
		FROM member_grade
		WHERE id_lib=#{idLib} AND grade_id=#{gradeId}
	</select>
	
	<!-- 등급 정보를 변경한다. -->
	<select id="updateGrade" parameterType="com.gaimit.mlm.model.Member">
		UPDATE member_grade
		SET
			grade_name=#{gradeName}, brw_limit=#{brwLimit}, date_limit=#{dateLimit},
			standard=#{standard}
		WHERE grade_id=#{gradeId} AND id_lib=#{idLib}
	</select>
	
	<!-- 등급을 추가한다 -->
	<insert id="insertGrade" parameterType="com.gaimit.mlm.model.Member" useGeneratedKeys="true" keyProperty="grade_id">
		INSERT INTO member_grade (
			grade_name, brw_limit, date_limit, id_lib, standard
		) VALUES (
			#{gradeName}, #{brwLimit}, #{dateLimit}, #{idLib}, #{standard}
		)
	</insert>
	
	<!-- 중복되는 등급이름이 있을 경우 NPE 발생 -->
	<select id="selectGradeNameCount" parameterType="com.gaimit.mlm.model.Member" resultType="int">
		SELECT
			count(grade_id)
		FROM member_grade
		WHERE id_lib=#{idLib} AND grade_name=#{gradeName}
	</select>
	
	<!--  -->
	<select id="selectGradeCountForPage" parameterType="com.gaimit.mlm.model.Member" resultType="int">
		SELECT
			count(grade_id)
		FROM member_grade
		WHERE id_lib=#{idLib}
		<if test="gradeName != null">
			AND grade_name LIKE concat('%',#{gradeName} ,'%')
		</if>
	</select>
	
	<!-- 회원등급 정보를 삭제한다 -->
	<delete id="deleteMemberGrade" parameterType="com.gaimit.mlm.model.Member">
		DELETE
		FROM member_grade
		WHERE id_lib=#{idLib} AND grade_id=#{gradeId} AND standard=0;
	</delete>
	
	<!-- 삭제하려는 등급을 사용중인 회원을 검색하여 기준 등급으로 변경 -->
	<update id="updateMemberGradeStandardToDelete" parameterType="com.gaimit.mlm.model.Member">
		UPDATE member SET
			grade_id =
				(SELECT grade_id FROM member_grade
				WHERE id_lib=#{idLib} AND standard=1), edit_date=now()
		WHERE id_lib=#{idLib} AND grade_id=#{gradeId}
	</update>
	
	<select id="selectGradeStandardCount" parameterType="com.gaimit.mlm.model.Member" resultType="int">
		SELECT
			count(grade_id)
		FROM member_grade
		WHERE id_lib=#{idLib} AND standard=1
	</select>
	
	<update id="updateMemberGradeStandardToNormal" parameterType="com.gaimit.mlm.model.Member">
		UPDATE member_grade SET
			standard = 0
		WHERE id_lib=#{idLib} AND standard=1
	</update>
	
	<!-- 결과값 grade id 회원엑셀 import를 위하여, 가져오는 값이 grade_id -->
	<select id="selectGradeIdByGradeNameForImportMember" parameterType="com.gaimit.mlm.model.Member" resultType="int">
		SELECT
			grade_id
		FROM member_grade
		WHERE id_lib=#{idLib} AND grade_name=#{gradeName}
		LIMIT 1
	</select>
	
	
	<!-- 회원 정보 엑셀에서 가져오는 값 현재 상황 파악을 위해서, db에 요청 몇개 등록되었는지 가져오기 -->
	<select id="selectCountMemberImportExcelData" parameterType="com.gaimit.mlm.model.Member" resultType="int">
		SELECT COUNT(id) FROM member
		WHERE id_lib = #{idLib}
			AND edit_date &gt;= #{editDate}
	</select>
	
	<!-- 회원 분류 목록 -->
	<select id="selectMemberClassListByLib" parameterType="com.gaimit.mlm.model.Member" resultMap="member">
		SELECT id_mbr_class, id_lib, class_name
		FROM member_class
		WHERE id_lib = #{idLib}
		<if test="className != null">
			AND class_name LIKE concat('%',#{className} ,'%')
		</if>
	</select>
	
	<!-- 회원 분류 개수 -->
	<select id="selectMemberClassCountForPage" parameterType="com.gaimit.mlm.model.Member" resultType="int">
		SELECT COUNT(id_mbr_class)
		FROM member_class
		WHERE id_lib = #{idLib}
		<if test="className != null">
			AND class_name LIKE concat('%',#{className} ,'%')
		</if>
	</select>
	
	<!-- 분류를 추가한다 -->
	<insert id="insertClassMember" parameterType="com.gaimit.mlm.model.Member" useGeneratedKeys="true" keyProperty="id_mbr_class">
		INSERT INTO member_class (
			class_name, id_lib
		) VALUES (
			#{className}, #{idLib}
		)
	</insert>
	
	<!-- 중복되는 분류 이름이 있을 경우 NPE 발생 -->
	<select id="selectClassNameCountForDup" parameterType="com.gaimit.mlm.model.Member" resultType="int">
		SELECT
			count(id_mbr_class)
		FROM member_class
		WHERE id_lib=#{idLib} AND class_name=#{className}
	</select>
	
	<!-- 결과값 id_mbr_class 회원엑셀 import를 위하여, 가져오는 값이 id_mbr_class -->
	<select id="selectIdMbrClassByClassNameForImportMember" parameterType="com.gaimit.mlm.model.Member" resultType="int">
		SELECT
			id_mbr_class
		FROM member_class
		WHERE id_lib=#{idLib} AND class_name=#{className}
		LIMIT 1
	</select>
	
		<!-- 회원분류 정보를 삭제한다 -->
	<delete id="deleteClassMemberItem" parameterType="com.gaimit.mlm.model.Member">
		DELETE
		FROM member_class
		WHERE id_lib=#{idLib} AND id_mbr_class = #{idMbrClass}
	</delete>
	
	<!-- 회원분류를 삭제하기 앞서서 회원의 회원분류를 null 로 -->
	<update id="updateMemberClassIdToNull" parameterType="com.gaimit.mlm.model.Member">
		UPDATE member
		SET
			class_id = NULL
		WHERE id_lib = #{idLib}
			AND class_id = #{classId}
	</update>
	
	<!-- 회원 분류 정보 단일 조회 -->
	<select id="selectClassMemberItem" parameterType="com.gaimit.mlm.model.Member" resultMap="member">
		SELECT
			id_mbr_class, id_lib, class_name
		FROM member_class
		WHERE id_lib=#{idLib} AND id_mbr_class=#{idMbrClass}
	</select>
	
	<!-- 회원 분류 정보를 변경한다. -->
	<select id="updateClassMemberItem" parameterType="com.gaimit.mlm.model.Member">
		UPDATE member_class
		SET
			class_name=#{className}
		WHERE id_mbr_class=#{idMbrClass} AND id_lib=#{idLib}
	</select>
	
	<!-- 사용자화면에서, 회원 목록 검색 처리. -->
	<select id="selectMemberListUserSelf" parameterType="com.gaimit.mlm.model.Member" resultMap="member">
		SELECT
			id, m.id_lib, name, phone, birthdate, email, postcode, addr1, addr2,
			remarks, reg_date, barcode_mbr, rf_uid, m.grade_id, grade_name,
			brw_limit, date_limit, class_name
		FROM member m
		INNER JOIN member_grade g ON m.grade_id = g.grade_id
		LEFT OUTER JOIN member_class c ON m.class_id = c.id_mbr_class
		WHERE m.id_lib=#{idLib} AND status = 1
		<if test="(name != null) and (name != '')">
			AND (
				name LIKE concat('%', #{name}, '%')
				OR barcode_mbr = #{name} 
			)
		</if>
		<if test="(className != null) and (className != '')">
			AND class_name LIKE concat('%', #{className}, '%')
		</if>
		<choose>
			<!-- int로 받는 classId는 값이 없으면 0, 음수, 양수 값이된다. -->
			<!-- 양수 값이면, 해당 값을 찾아가고 -->
			<!-- 음수 값이면, 분류가 설정되지 않은 인원만 찾는다. -->
			<!-- 0일 경우 아무것도 하지 않는 전체 목록을 가져온다. -->
			<when test="classId gt 0">
				AND class_id = #{classId}
			</when>
			<when test="classId lt 0">
				AND class_id IS NULL
			</when>
			<otherwise>
				<!-- 아무것도 하지 않음. -->
			</otherwise>
		</choose>
		ORDER BY name ASC
	</select>
	
		<!-- 사용자화면에서, 회원 온전한 이름 또는 회원등록번호 검색 처리. -->
	<select id="selectMemberItemUserSelf" parameterType="com.gaimit.mlm.model.Member" resultMap="member">
		SELECT
			id, m.id_lib, name, phone, birthdate, email, postcode, addr1, addr2,
			remarks, reg_date, barcode_mbr, rf_uid, m.grade_id, grade_name,
			brw_limit, date_limit, class_name, profile_img
		FROM member m
		INNER JOIN member_grade g ON m.grade_id = g.grade_id
		LEFT OUTER JOIN member_class c ON m.class_id = c.id_mbr_class
		WHERE m.id_lib=#{idLib} AND status = 1
			AND (
				name = #{name}
				OR barcode_mbr = #{name}
				OR rf_uid = #{name}
			)
		ORDER BY name ASC
	</select>
	
	
	<!-- 회원등록번호로  -->
	<select id="selectMemberByBarcodeMbr" parameterType="com.gaimit.mlm.model.Member" resultMap="member">
		SELECT
			id, m.id_lib, m.name, phone, other_contact, birthdate, email, postcode,
			addr1, addr2, remarks, reg_date, barcode_mbr, profile_img,
			rf_uid,
			g.grade_id, grade_name, class_id, c.class_name,
			brw_limit, date_limit
		FROM member m
		INNER JOIN member_grade g ON m.grade_id = g.grade_id
		LEFT OUTER JOIN member_class c ON m.class_id = c.id_mbr_class
		WHERE m.id_lib=#{idLib} AND (
			barcode_mbr=#{barcodeMbr}
			OR
			rf_uid=#{barcodeMbr}
		)
	</select>
	
	<!-- 도서관 삭제를 회원삭제 -->
	<delete id="deleteMemberByIdLib" parameterType="com.gaimit.mlm.model.Member">
		DELETE
		FROM member
		WHERE id_lib=#{idLib}
	</delete>
	
	<delete id="deleteMemberClassByIdLib" parameterType="com.gaimit.mlm.model.Member">
		DELETE
		FROM member_class
		WHERE id_lib=#{idLib}
	</delete>
	
	<delete id="deleteMemberGradeByIdLib" parameterType="com.gaimit.mlm.model.Member">
		DELETE
		FROM member_grade
		WHERE id_lib=#{idLib}
	</delete>
	
	<!-- 타겟날짜에 신규등록된 회원 -->
	<select id="selectNewMemberCountByRegDatePick" parameterType="com.gaimit.mlm.model.Member"
		resultType="int">
		SElECT count(id)
		FROM member
		WHERE id_lib=#{idLib} AND status = 1
			AND (
				(DATE_FORMAT(reg_date, '%Y-%m-%d') &gt; DATE_ADD(#{regDate}, INTERVAL -1 DAY))
				AND (DATE_FORMAT(reg_date, '%Y-%m-%d') &lt; DATE_ADD(#{regDate}, INTERVAL 1 DAY))
			)
	</select>
	
	<!-- 타겟날짜에 제적(회원삭제)된 회원 -->
	<select id="selectInactiveMemberCountByRegDatePick" parameterType="com.gaimit.mlm.model.Member"
		resultType="int">
		SElECT count(id)
		FROM member
		WHERE id_lib=#{idLib} AND status = 2
			AND (
				(DATE_FORMAT(edit_date, '%Y-%m-%d') &gt; DATE_ADD(#{editDate}, INTERVAL -1 DAY))
				AND (DATE_FORMAT(edit_date, '%Y-%m-%d') &lt; DATE_ADD(#{editDate}, INTERVAL 1 DAY))
			)
	</select>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
</mapper>