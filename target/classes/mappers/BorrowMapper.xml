<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="BorrowMapper">
	<resultMap id="borrow" type="com.gaimit.mlm.model.Borrow">
		<result property="idBrw" column="id_brw"/>
		<result property="idLibBrw" column="id_lib_brw"/>
		<result property= "bookHeldId" column="book_held_id"/>
		<result property="idMemberBrw" column="id_member_brw"/>
		<result property="startDateBrw" column="start_date_brw"/>
		<result property="endDateBrw" column="end_date_brw"/>
		<result property="dueDateBrw" column="due_date_brw"/>
		
		<result property="countIdBrw" column="count_id_brw"/>
		<result property="restrictDateBrw" column="restrict_date_brw"/>
		<result property="brwNow" column="brw_now"/>
		<result property="pickDateBrw" column="pick_date_brw"/>
		
		<!-- member beans -->
		<result property="name" column="name"/>
		<result property="phone" column="phone"/>
		<result property="gradeId" column="grade_id"/>
		<result property="gradeName" column="grade_name"/>
		<result property="brwLimit" column="brw_limit"/>
		<result property="dateLimit" column="date_limit"/>
		<result property="barcodeMbr" column="barcode_mbr"/>
		<result property="profileImg" column="profile_img"/>
		
		<!-- member class beans -->
		<result property="idMbrClass" column="id_mbr_class"/>
		<result property="className" column="class_name"/>
		
		<!-- book beans -->
		<result property="titleBook" column="title_book"/>
		<result property="writerBook" column="writer_book"/>
		<result property="publisherBook" column="publisher_book"/>
		
		<!-- book_held beans -->
		<result property="title" column="title"/>
		<result property="writer" column="writer"/>
		<result property="publisher" column="publisher"/>
		<result property="localIdBarcode" column="local_id_barcode"/>
		<result property="sortingIndex" column="sorting_index"/>
		<result property="copyCode" column="copy_code"/>
		<result property="available" column="available"/>
		
		<!-- 통계를 위한 변수 -->
		
		
	</resultMap>
	
	<!-- &lt; = <
			 &gt; = > -->
	
	<!-- 도서 대출 정보를 저장한다
		BrwBookOk.java - brwList 사용 -->
	<insert id="insertBrw" parameterType="com.gaimit.mlm.model.Borrow" useGeneratedKeys="true" keyProperty="id_brw">
		INSERT INTO borrow (
			id_lib_brw, book_held_id, id_member_brw, start_date_brw, due_date_brw
		) VALUES (
			#{idLibBrw}, #{bookHeldId}, #{idMemberBrw}, now(),
			DATE_FORMAT(DATE_ADD(now(), INTERVAL (
				SELECT date_limit
				FROM member_grade g
				INNER JOIN member m ON m.grade_id = g.grade_id
				WHERE m.id=#{idMemberBrw}) DAY), '%Y-%m-%d 23:59:59')
		)
	</insert>
	
	<!-- getBorrowList -->
	<select id="selectBorrowList" parameterType="com.gaimit.mlm.model.Borrow" resultMap="borrow">
		SELECT
			id_brw, id_lib_brw, book_held_id, title, writer, local_id_barcode,
			id_member_brw, class_name, m.name, m.phone, start_date_brw, end_date_brw,
			due_date_brw
		FROM borrow r
		INNER JOIN book_held h ON r.book_held_id = h.id
		<!-- INNER JOIN book b ON b.id_book = h.book_id_book -->
		INNER JOIN member m ON r.id_member_brw = m.id
		LEFT OUTER JOIN member_class c on c.id_mbr_class = m.class_id
		WHERE id_lib_brw = #{idLibBrw} AND (end_date_brw is NULL OR end_date_brw = '')
			AND (available = 0 OR available = 1)
		<if test="(name != null) || (title != null) || (localIdBarcode != null)">
			AND (
				<if test="name != null">
					name LIKE concat('%', #{name}, '%')
				</if>
				<if test="title != null">
					title LIKE concat('%', #{title}, '%')
				</if>
				<if test="localIdBarcode != null">
					local_id_barcode LIKE concat('%', #{localIdBarcode}, '%')
				</if>
			)
		</if>
		<if test="className != null">
			<if test='className.equals("unClass")'>
				AND class_name is null
			</if>
			<if test='className != null and !className.equals("unClass")'>
				AND class_name = #{className}
			</if>
		</if>
		ORDER BY m.name ASC
		<if test="listCount != 0">
			LIMIT #{limitStart}, #{listCount}
		</if>
	</select>
	
	<select id="selectBorrowListCount" parameterType="com.gaimit.mlm.model.Borrow" resultType="int">
		SELECT
			COUNT(id_brw)
		FROM borrow r
		INNER JOIN book_held h ON r.book_held_id = h.id
		<!-- INNER JOIN book b ON b.id_book = h.book_id_book -->
		INNER JOIN member m ON r.id_member_brw = m.id
		LEFT OUTER JOIN member_class c on c.id_mbr_class = m.class_id
		WHERE id_lib_brw = #{idLibBrw} AND (end_date_brw is NULL OR end_date_brw = '')
			AND (available = 0 OR available = 1)
		<if test="(name != null) || (title != null) || (localIdBarcode != null)">
			AND (
				<if test="name != null">
					name LIKE concat('%', #{name}, '%')
				</if>
				<if test="title != null">
					title LIKE concat('%', #{title}, '%')
				</if>
				<if test="localIdBarcode != null">
					local_id_barcode LIKE concat('%', #{localIdBarcode}, '%')
				</if>
			)
		</if>
		
		<if test="className != null">
		<if test='className.equals("unClass")'>
			AND class_name is null
		</if>
		<if test='className != null and !className.equals("unClass")'>
			AND class_name = #{className}
		</if>
		</if>
		<!-- 위 selectBorrowList에 if 조건 똑같이 넣어야된다. -->
	</select>
	
	<!-- brwBook.java - 오늘의 대출/반납 표시 -->
	<select id="selectBorrowListToday" parameterType="com.gaimit.mlm.model.Borrow" resultMap="borrow">
		SELECT
			id_brw, id_lib_brw, book_held_id, title, local_id_barcode,
			id_member_brw, m.name, m.phone, start_date_brw, end_date_brw,
			due_date_brw, grade_name
		FROM borrow r
		INNER JOIN book_held h ON r.book_held_id = h.id
		<!-- INNER JOIN book b ON b.id_book = h.book_id_book -->
		INNER JOIN member m ON r.id_member_brw = m.id
		INNER JOIN member_grade g ON m.grade_id = g.grade_id
		WHERE id_lib_brw = #{idLibBrw}
		<choose>
			<when test="pickDateBrw==null || pickDateBrw==''">
				AND ((start_date_brw &gt; curdate() OR end_date_brw &gt; curdate())
			</when>
			<otherwise>
				AND (((start_date_brw &gt; #{pickDateBrw} AND start_date_brw &lt; #{pickDateBrw} + INTERVAL 1 DAY)
					OR (end_date_brw &gt; #{pickDateBrw} AND end_date_brw &lt; #{pickDateBrw} + INTERVAL 1 DAY))
			</otherwise>
		</choose> 
				OR IF((end_date_brw IS NULL OR end_date_brw =''),due_date_brw &lt; curdate(),''))
		ORDER BY id_brw ASC
	</select>
	
	<!--대출/반납 통계를 위한 연체 도서는 제외함 -->
	<select id="selectBrwRtnList" parameterType="com.gaimit.mlm.model.Borrow" resultMap="borrow">
		SELECT
			id_brw, id_lib_brw, book_held_id, title, writer, local_id_barcode,
			publisher,
			id_member_brw, m.name, m.phone, m.barcode_mbr, start_date_brw, end_date_brw,
			due_date_brw, grade_name
		FROM borrow r
		INNER JOIN book_held h ON r.book_held_id = h.id
		<!-- INNER JOIN book b ON b.id_book = h.book_id_book -->
		INNER JOIN member m ON r.id_member_brw = m.id
		INNER JOIN member_grade g ON m.grade_id = g.grade_id
		WHERE id_lib_brw = #{idLibBrw}
		<choose>
			<when test="pickDateBrw==null || pickDateBrw==''">
				AND ((start_date_brw &gt; curdate() OR end_date_brw &gt; curdate())
			</when>
			<otherwise>
				AND (((start_date_brw &gt; #{pickDateBrw} AND start_date_brw &lt; #{pickDateBrw} + INTERVAL 1 DAY)
					OR (end_date_brw &gt; #{pickDateBrw} AND end_date_brw &lt; #{pickDateBrw} + INTERVAL 1 DAY))
			</otherwise>
		</choose>
				<!-- 아래 맨 오른쪽에 ) 괄호 하나 있음. 없으면 안됨. 주석 다 삭제하려면해도됨. -->
				<!-- OR IF((end_date_brw IS NULL OR end_date_brw =''),due_date_brw &lt; curdate(),'') -->)
		ORDER BY id_brw ASC
	</select>
	
	<!-- getBorrowItemByBarcodeBook
		ReturnBookOk - idBrw 호출을 위해 사용 -->
	<select id="selectBorrowItemByBarcodeBook" parameterType="com.gaimit.mlm.model.Borrow" resultMap="borrow">
		SELECT
			id_brw, id_lib_brw, book_held_id, local_id_barcode,
			id_member_brw, m.name as name, m.phone, start_date_brw, end_date_brw
		FROM borrow r
		INNER JOIN book_held h on r.book_held_id = h.id
		INNER JOIN member m on r.id_member_brw = m.id
		WHERE id_lib_brw=#{idLibBrw}
			AND (
				local_id_barcode=#{localIdBarcode}
				<!-- 아래 조건은, 비슷한 제목이 두개 이상일 경우, 마지막으로 빌린
					도서가 자동으로 반납됨. 조건이 얼마 없음. 그래서 탈락. -->
				<!-- OR title LIKE concat('%', #{localIdBarcode}, '%') -->
			)
		<!-- AND (end_date_brw is NULL OR end_date_brw = '') -->
		<!-- returnCancel 기능을 위해서, 위 조건 삭제 -->
		ORDER BY start_date_brw DESC
		LIMIT 1
	</select>
	<!-- 분기하자, 반납처리를 위한 데이터 조회 1개
	반납취소 처리를 위한 데이터 조회 1개로 중간에 꼬일 수가 있을 듯. -->
	
	<!-- 대출중 도서 제목으로 검색 -->
	<select id="selectBorrowListByTitle" parameterType="com.gaimit.mlm.model.Borrow" resultMap="borrow">
		SELECT
			id_brw, id_lib_brw, book_held_id, title, writer, local_id_barcode,
			id_member_brw, m.name, m.phone, start_date_brw, end_date_brw,
			due_date_brw
		FROM borrow r
		INNER JOIN book_held h ON r.book_held_id = h.id
		INNER JOIN member m ON r.id_member_brw = m.id
		WHERE id_lib_brw = #{idLibBrw} AND (end_date_brw is NULL OR end_date_brw = '')
		<if test="(title != null)">
			AND (
				<if test="title != null">
					title LIKE concat('%', #{title}, '%')
				</if>
			)
		</if>
		ORDER BY local_id_barcode ASC
	</select>
	
	<!-- ReturnBookOk.java - 도서반납 후 해당 멤버의 나머지 대출중인 도서 조회
		getBorrowListByMbrId -->
	<select id="selectBorrowListByMbrId" parameterType="com.gaimit.mlm.model.Borrow" resultMap="borrow">
		SELECT
			id_brw, id_lib_brw, h.title, h.writer, h.local_id_barcode,
			id_member_brw, m.name as name, m.phone, start_date_brw, end_date_brw,
			due_date_brw ,brw_limit, date_limit
		FROM borrow r
		INNER JOIN book_held h ON r.book_held_id = h.id
		<!-- INNER JOIN book b ON h.book_id_book = b.id_book -->
		INNER JOIN member m ON r.id_member_brw = m.id
		INNER JOIN member_grade g ON m.grade_id = g.grade_id
		WHERE id_lib_brw=#{idLibBrw} AND id_member_brw=#{idMemberBrw}
			AND (end_date_brw is NULL  OR end_date_brw = '' OR end_date_brw &gt; curdate())
		ORDER BY start_date_brw ASC
	</select>
	
	<!-- ReturnBookOk.java - 책반납 업데이트  -->
	<update id="updateBorrowEndDate" parameterType="com.gaimit.mlm.model.Borrow">
		UPDATE borrow r
		SET end_date_brw=now()
		WHERE id_lib_brw=#{idLibBrw} AND book_held_id=#{bookHeldId}
			AND (end_date_brw is NULL OR end_date_brw = '')
			AND id_brw=#{idBrw}
			<!-- 필수 개중요 헷갈리지말자, idBrw 없으면 bookHeldid 전부다 수정됨 -->
	</update>
	
	<!-- ReturnCancelBookOk.java - 책반납 업데이트 -->
	<update id="updateCancelBorrowEndDate" parameterType="com.gaimit.mlm.model.Borrow">
		UPDATE borrow r
		<!-- INNER JOIN book_held h on r.book_held_id = h.id -->
		SET end_date_brw = NULL
		WHERE id_lib_brw=#{idLibBrw} AND book_held_id=#{bookHeldId}
			AND (end_date_brw IS NOT NULL AND end_date_brw != '')
			AND id_brw=#{idBrw}
			<!-- 필수 개중요 헷갈리지말자, idBrw 없으면 bookHeldid 전부다 수정됨 -->
	</update>
	
	<!-- BrwBookOk.java, 현재 대출중인지 검사, 카운트>0이면 대출중입니다 리턴 -->
	<!-- getBorrowCountByBarcodeBook 임플먼트에서 실행 제목 -->
	<select id="selectBorrowCountByBarcodeBook" parameterType="com.gaimit.mlm.model.Borrow" resultType="int">
		SELECT count(id_brw)
		FROM borrow b
		INNER JOIN book_held h ON b.book_held_id = h.id
		WHERE id_lib_brw=#{idLibBrw}
			AND (end_date_brw is NULL OR end_date_brw = '')
			AND (available=0 OR available=1)
			AND local_id_barcode = #{localIdBarcode}
	</select>
	
	<!-- sorting index로 도서가 대출중인지 판별 -->
	<select id="selectBorrowCountBySortingIndex"  parameterType="com.gaimit.mlm.model.Borrow" resultType="int">
		SELECT count(id_brw)
		FROM borrow b
		INNER JOIN book_held h ON b.book_held_id = h.id
		WHERE id_lib_brw=#{idLibBrw}
			AND (end_date_brw is NULL OR end_date_brw = '')
			AND (available=0 OR available=1)
			AND sorting_index = #{sortingIndex}
	</select>
	
	<!-- bookHeldListPopup 에도 대출중이 아닌 책 검색 할때 사용
		도서리스트중에도 도서관 내의 책 검색에도 사용될 예정 -->
		<!-- 괄호도 신경써야된다.....!!!!! -->
	<select id="selectRemainedBookOnLibrary" parameterType="com.gaimit.mlm.model.Borrow" resultMap="borrow">
		SELECT
			title, writer, local_id_barcode, copy_code, publisher
		FROM book_held h
		LEFT OUTER JOIN borrow r ON h.id = r.book_held_id
		WHERE (available = 0 OR available = 1)
		AND (library_id_lib = #{libraryIdLib}
		AND (book_held_id NOT IN (SELECT book_held_id FROM borrow r WHERE (end_date_brw IS NULL OR end_date_brw = '')))
		OR (library_id_lib = #{libraryIdLib} AND id_brw IS NULL))
		<choose>
			<when test="title != null">
				AND title LIKE concat('%', #{title}, '%')
			</when>
			<when test="writer != null">
				AND writer LIKE concat('%', #{writer}, '%')
			</when>
			<when test="publisher != null">
				AND publisher LIKE concat('%', #{publisher}, '%')
			</when>
		</choose>
		GROUP BY id
		LIMIT #{limitStart}, #{listCount}
	</select>
	
	<!-- 대출을 위한 도서 권수 검색 -->
	<select id="selectRemainedBookCountOnLibrary" parameterType="com.gaimit.mlm.model.Borrow" resultType="int">
		SELECT
			COUNT(id)
		FROM book_held h
		LEFT OUTER JOIN borrow r ON h.id = r.book_held_id
		WHERE (available = 0 OR available = 1)
		AND (library_id_lib = #{libraryIdLib}
		AND (book_held_id NOT IN (SELECT book_held_id FROM borrow r WHERE (end_date_brw IS NULL OR end_date_brw = '')))
		OR (library_id_lib = #{libraryIdLib} AND id_brw IS NULL))
		<choose>
			<when test="title != null">
				AND title LIKE concat('%', #{title}, '%')
			</when>
			<when test="writer != null">
				AND writer LIKE concat('%', #{writer}, '%')
			</when>
			<when test="publisher != null">
				AND publisher LIKE concat('%', #{publisher}, '%')
			</when>
		</choose>
	</select>
	
	<!-- BrwBook.java  
		memberId를 이용하여, 멤버가 현재 대여중인 도서 권수 확인 -->
	<select id="selectBrwBookCountByMemberId" parameterType="com.gaimit.mlm.model.Borrow" resultType="int">
		SELECT
			COUNT(id_brw)
		FROM borrow r
		INNER JOIN member m ON r.id_member_brw = m.id
		WHERE id_lib_brw = #{idLibBrw} AND (end_date_brw IS NULL OR end_date_brw = '')
		AND id_member_brw = #{idMemberBrw}
	</select>
	
	<!-- BrwBookOk.java에서 사용 
		idMemberBrw 값은 member_grade와 member와는 상관없는 값이지만,
		resultMap에 명시되어있고, brw객체에 .setIdMemberBrw 로 m.id 값을 주어 사용 가능함. -->
	<select id="selectBrwLimitByMemberId" parameterType="com.gaimit.mlm.model.Borrow" resultType="int">
		SELECT
			brw_limit
		FROM member_grade g
		INNER JOIN member m ON g.grade_id = m.grade_id
		<!-- INNER JOIN borrow r ON m.id = r.id_member_brw -->
		WHERE m.id = #{idMemberBrw}
	</select>
	
	<!-- 오늘 반납되어야할 도서 목록 -->
	<select id="selectReturnListToday" parameterType="com.gaimit.mlm.model.Borrow" resultMap="borrow">
		SELECT
			id_brw, id_lib_brw, h.title, h.local_id_barcode,
			id_member_brw, m.name as name, m.phone, start_date_brw, end_date_brw,
			due_date_brw ,brw_limit, date_limit
		FROM borrow r
		INNER JOIN book_held h ON r.book_held_id = h.id
		<!-- INNER JOIN book b ON h.book_id_book = b.id_book -->
		INNER JOIN member m ON r.id_member_brw = m.id
		INNER JOIN member_grade g ON m.grade_id = g.grade_id
		WHERE id_lib_brw=#{idLibBrw}
			AND (end_date_brw is NULL  OR end_date_brw = '')
			AND (due_date_brw &lt; DATE_ADD(CURDATE(), INTERVAL 1 DAY))
			AND (available = 0 OR available = 1)
		ORDER BY due_date_brw ASC
	</select>
	
	<!-- 연체중인지 체크하기 -->
	<select id="selectOverDueCountByMemberId" parameterType="com.gaimit.mlm.model.Borrow" resultType="int">
		SELECT
			COUNT(id_brw)
		FROM borrow r
		INNER JOIN member m ON r.id_member_brw = m.id
		WHERE id_lib_brw=#{idLibBrw} AND id_member_brw = #{idMemberBrw}
			AND (end_date_brw is NULL  OR end_date_brw = '')
			AND (due_date_brw &lt; curdate())
	</select>
	
	<!-- 연체도서를 반납하였다면 -->
	<select id="selectRestrictDate" parameterType="com.gaimit.mlm.model.Borrow" resultMap="borrow">
		SELECT
			DATE_ADD(end_date_brw, INTERVAL DATEDIFF(end_date_brw, due_date_brw) DAY) as restrict_date_brw
		FROM borrow r
		INNER JOIN member m ON r.id_member_brw = m.id
		WHERE id_lib_brw = #{idLibBrw} AND id_member_brw = #{idMemberBrw}
			AND (end_date_brw is NOT NULL  OR end_date_brw != '')
			AND (end_date_brw &gt; due_date_brw)
			AND (date_add(end_date_brw, INTERVAL DATEDIFF(end_date_brw, due_date_brw) DAY) &gt; curdate())
		ORDER BY restrict_date_brw DESC
		LIMIT 1
	</select>
	
	<!-- BookHeldDelete.java, 삭제하려는 도서가 대출기록이 있는지 판단
		대출기록이 있으면 삭제 불가능하고, 폐기처리 -->
	<select id="selectBorrowCountDeleteBookHeldId" parameterType="com.gaimit.mlm.model.Borrow" resultType="int">
		SELECT count(id_brw)
		FROM borrow r
		INNER JOIN book_held h ON r.book_held_id = h.id
		WHERE id_lib_brw=#{idLibBrw}
			AND book_held_id=#{bookHeldId}
	</select>
	
	<select id="selectBorrowMemberCountThisMonth" parameterType="com.gaimit.mlm.model.Borrow" resultMap="borrow">
		SELECT count(id_brw) as count_id_brw, id_member_brw, m.name
		FROM borrow r
		INNER JOIN member m ON r.id_member_brw = m.id
		WHERE id_lib_brw=#{idLibBrw}
			AND start_date_brw &gt; (last_day(now()-interval 1 month) + interval 1 day)
			AND start_date_brw &lt; (last_day(now())+interval 1 day)
		GROUP BY id_member_brw
	</select>
	
	<!-- 이번 달 대출카운트 last_day(now()) 이번달의 마지막 날 -->
	<select id="selectBorrowBookCountThisMonth" parameterType="com.gaimit.mlm.model.Borrow" resultMap="borrow">
		SELECT
			count(id_brw) as count_id_brw,
			book_held_id, h.title, m.name
		FROM borrow r
		INNER JOIN member m  ON r.id_member_brw = m.id
		INNER JOIN book_held h ON r.book_held_id = h.id
		<!-- INNER JOIN book b ON h.book_id_book = b.id_book -->
		WHERE id_lib_brw=#{idLibBrw}
			AND start_date_brw &gt; (last_day(now()-interval 1 month) + interval 1 day)
			AND start_date_brw &lt; (last_day(now())+interval 1 day)
		GROUP BY book_held_id
		ORDER BY count(id_brw) DESC
	</select>
	
	<!-- 도서의 id로 대출된 내용이 있는지 확인
	userSelfController에서도 사용하고, brwBook brwBookOk에서도 사용하는 듯. 귀찮아서 몰라 -->
	<select id="selectBorrowItemByBookHeldId" parameterType="com.gaimit.mlm.model.Borrow" resultMap="borrow">
		SELECT
			id_brw, id_lib_brw, book_held_id,
			id_member_brw, start_date_brw, end_date_brw, due_date_brw,
			local_id_barcode
		FROM borrow r
		INNER JOIN book_held h ON r.book_held_id = h.id
		WHERE id_lib_brw=#{idLibBrw}
			AND (end_date_brw is NULL OR end_date_brw = '')
			AND book_held_id = #{bookHeldId}
		LIMIT 1
	</select>
	
	<!-- userSelfController.java, 현재 대출중인지 검사, 카운트>0이면 내가 대출중 -->
	<select id="selectBorrowCountByBookHeldId" parameterType="com.gaimit.mlm.model.Borrow" resultType="int">
		SELECT count(id_brw)
		FROM borrow b
		INNER JOIN book_held h ON b.book_held_id = h.id
		WHERE id_lib_brw=#{idLibBrw}
			AND (end_date_brw is NULL OR end_date_brw = '')
			AND book_held_id = #{bookHeldId}
	</select>
	
	<!-- 도서 대출을 위한 회원 검색 -->
	<select id="selectMemberListForBorrow" parameterType="com.gaimit.mlm.model.Borrow" resultMap="borrow">
		SELECT
			id, m.id_lib, m.name, phone, g.grade_id, barcode_mbr, grade_name,
			brw_limit, date_limit, profile_img,
			(SELECT COUNT(id_brw) FROM borrow WHERE id_lib_brw = #{idLibBrw}
				AND (end_date_brw IS NULL OR end_date_brw = '')
				AND id_member_brw = id) as brw_now
		FROM member m
		INNER JOIN member_grade g ON m.grade_id = g.grade_id
		LEFT OUTER JOIN borrow r ON m.id = r.id_member_brw
		WHERE m.id_lib=#{idLibBrw}
			AND status = 1
			AND (
				(name LIKE concat('%', #{name}, '%'))
				OR (barcode_mbr LIKE concat('%', #{name}, '%'))
				OR (phone LIKE concat('%', #{name}, '%'))
				OR (rf_uid LIKE CONCAT('%', #{name}, '%'))
			)
		GROUP BY id
		LIMIT 20
	</select>
	
	<!-- 도서 반납 후 회원 정보 호출을 위한 검색 -->
	<select id="selectMemberItemByMemberId" parameterType="com.gaimit.mlm.model.Borrow" resultMap="borrow">
		SELECT
			id, m.id_lib, m.name, phone, g.grade_id, barcode_mbr, grade_name,
			brw_limit, date_limit, profile_img
		FROM member m
		INNER JOIN member_grade g ON m.grade_id = g.grade_id
		WHERE m.id_lib=#{idLibBrw}
			AND id=#{idMemberBrw}
	</select>
	
	<!-- userSelfController.java, 내가 대출중인지 검사, 카운트>0이면 내가 대출중 -->
	<select id="selectBorrowCountByBookHeldIdAndMemberId" parameterType="com.gaimit.mlm.model.Borrow" resultType="int">
		SELECT count(id_brw)
		FROM borrow b
		INNER JOIN book_held h ON b.book_held_id = h.id
		WHERE id_lib_brw=#{idLibBrw}
			AND (end_date_brw is NULL OR end_date_brw = '')
			AND book_held_id = #{bookHeldId}
			AND id_member_brw = #{idMemberBrw}
	</select>
	
	<!-- userSelfController.java, 현재 대출중인지 검사, 카운트>0이면 내가 대출중 -->
	<select id="selectBorrowCountByBookHeldIdAndNotMy" parameterType="com.gaimit.mlm.model.Borrow" resultType="int">
		SELECT count(id_brw)
		FROM borrow b
		INNER JOIN book_held h ON b.book_held_id = h.id
		WHERE id_lib_brw=#{idLibBrw}
			AND (end_date_brw is NULL OR end_date_brw = '')
			AND book_held_id = #{bookHeldId}
			<if test="idMemberBrw != 0">
				AND id_member_brw != #{idMemberBrw}
			</if>
	</select>
	
	
	<!-- 해당 도서 정보, 도서의 대출/반납 이력 -->
	<select id="selectBookBorrowLogByBookHeldId" parameterType="com.gaimit.mlm.model.Borrow" resultMap="borrow">
		SELECT
			id_brw, id_lib_brw, book_held_id, id_member_brw, start_date_brw, end_date_brw,
			m.name, m.phone
		FROM borrow r
		INNER JOIN member m ON m.id = r.id_member_brw
		WHERE id_lib_brw = #{idLibBrw}
			AND book_held_id=#{bookHeldId}
	</select>
	
	
	<!-- 해당 회원 기준 회원이 대출/반납한 도서 리스트 뽑기 -->
	<select id="selectBorrowLogByMemberId" parameterType="com.gaimit.mlm.model.Borrow" resultMap="borrow">
		SELECT
			id_brw, id_lib_brw, book_held_id, id_member_brw, start_date_brw, end_date_brw,
			h.title, h.writer, h.local_id_barcode
		FROM borrow r
		INNER JOIN book_held h ON h.id = r.book_held_id
		WHERE id_lib_brw = #{idLibBrw}
			AND id_member_brw = #{idMemberBrw}
	</select>
	
	
	<!--통계 기간별 대출권수 -->
	<select id="selectStatisticsBrwAndMemberByDate" parameterType="com.gaimit.mlm.model.Borrow" resultMap="borrow">
		SELECT
			id_brw, start_date_brw, end_date_brw,
			title, writer, local_id_barcode,
			name
		FROM borrow r
		INNER JOIN book_held h ON h.id = r.book_held_id
		INNER JOIN member m ON m.id = r.id_member_brw
		WHERE id_lib_brw = #{idLibBrw}
		AND (start_date_brw &gt; #{startDateBrw})
		AND (start_date_brw &lt; #{endDateBrw} + INTERVAL 1 DAY)
	</select>
	
	<!-- 통계 기간별 대출이용자수 -->
	<select id="selectStatisticsMemberCountByDate" parameterType="com.gaimit.mlm.model.Borrow" resultType="int">
		SELECT
			COUNT(a.id_brw)
		FROM (
			SELECT id_brw FROM borrow
			WHERE id_lib_brw = #{idLibBrw}
				AND (start_date_brw &gt; #{startDateBrw})
				AND (start_date_brw &lt; #{endDateBrw} + INTERVAL 1 DAY)
			GROUP BY id_member_brw
		) AS a
	</select>
	
	<!-- kiosk모드에서 idBrw 호출을 위해 바코드로 대출중인 도서 검색 -->
	<select id="selectBorrowIdBrwByBarcodeBook" parameterType="com.gaimit.mlm.model.Borrow" resultMap="borrow">
		SELECT
			id_brw, id_lib_brw, book_held_id, local_id_barcode,
			start_date_brw, end_date_brw
		FROM borrow r
		INNER JOIN book_held h on r.book_held_id = h.id
		WHERE id_lib_brw=#{idLibBrw}
			AND local_id_barcode=#{localIdBarcode}
			AND (end_date_brw is NULL OR end_date_brw = '')
		LIMIT 1
	</select>
	
	<!-- 도서관 삭제를 위한 borrow 기록 삭제  -->
	<delete id="deleteBorrowsByIdLibBrw"  parameterType="com.gaimit.mlm.model.Borrow">
		DELETE FROM borrow
		WHERE id_lib_brw = #{idLibBrw}
	</delete>
	
</mapper>