<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="BookCheckMapper">
	<resultMap id="bookCheck" type="com.gaimit.mlm.model.BookCheckModel">
		<result property="idBrw" column="id_brw"/>
		<result property="idLibBrw" column="id_lib_brw"/>
		<result property= "bookHeldId" column="book_held_id"/>
		<result property="idMemberBrw" column="id_member_brw"/>
		<result property="startDateBrw" column="start_date_brw"/>
		<result property="endDateBrw" column="end_date_brw"/>
		<result property="dueDateBrw" column="due_date_brw"/>
		
		<result property="countIdBrw" column="count_id_brw"/>
		<result property="restrictDateBrw" column="restrict_date_brw"/>
		<result property="brwNow" column="brw_now"/>
		<result property="pickDateBrw" column="pick_date_brw"/>
		
		<!-- member beans -->
		<result property="name" column="name"/>
		<result property="phone" column="phone"/>
		<result property="gradeId" column="grade_id"/>
		<result property="gradeName" column="grade_name"/>
		<result property="brwLimit" column="brw_limit"/>
		<result property="dateLimit" column="date_limit"/>
		<result property="barcodeMbr" column="barcode_mbr"/>
		<result property="profileImg" column="profile_img"/>
		
		<!-- book beans -->
		<result property="titleBook" column="title_book"/>
		<result property="writerBook" column="writer_book"/>
		<result property="publisherBook" column="publisher_book"/>
		
		<!-- book_held beans -->
		<result property="title" column="title"/>
		<result property="writer" column="writer"/>
		<result property="publisher" column="publisher"/>
		<result property="sortingIndex" column="sorting_index"/>
		<result property="localIdBarcode" column="local_id_barcode"/>
		<result property="rfId" column="rf_id"/>
		<result property="libraryIdLib" column="library_id_lib"/>
		<result property="copyCode" column="copy_code"/>
		<result property="available" column="available"/>
		<result property="bookShelf" column="book_shelf"/>
		
		<!-- 장서점검 변수 -->
		<result property="idBcs" column="id_bcs"/>
		<result property="idLib" column="id_lib"/>
		<result property="checkDate" column="check_date"/>
		<result property="wholeCount" column="whole_count"/>
		<result property="checkedCount" column="checked_count"/>
		<result property="confirmCount" column="confirm_count"/>
		<result property="redupCount" column="redup_count"/>
		<result property="brwedCount" column="brwed_count"/>
		<result property="rentedCheckedCount" column="rented_checked_count"/>
		<result property="unregCount" column="unreg_count"/>
		<result property="uncheckedCount" column="unchecked_count"/>
		
		<result property="idBcl" column="id_bcl"/>
		<result property="inputBarcode" column="input_barcode"/>
		<result property="idBookHeld" column="id_book_held"/>
		<result property="checkResult" column="check_result"/>
		<result property="checkIp" column="check_ip"/>
		
	</resultMap>
	
	<!-- &lt; = <
			 &gt; = > -->
	
	<!-- 장서점검 개요 생성 -->
	<insert id="insertBcs" parameterType="com.gaimit.mlm.model.BookCheckModel" useGeneratedKeys="true" keyProperty="idBcs">
		INSERT INTO book_check_status (
			id_lib, check_date, whole_count, checked_count, confirm_count, redup_count,
			brwed_count, unchecked_count
		) VALUES (
			#{idLib}, now(), #{wholeCount}, #{checkedCount}, #{confirmCount}, #{redupCount},
			#{brwedCount}, #{uncheckedCount}
		)
	</insert>
	
	<!-- book check status 장서점검 전체 개요 -->
	<select id="selectBcsList" parameterType="com.gaimit.mlm.model.BookCheckModel" resultMap="bookCheck">
		SELECT
			id_bcs, id_lib, check_date, whole_count, checked_count, confirm_count,
			redup_count, brwed_count, rented_checked_count, unreg_count, unchecked_count
		FROM book_check_status
		WHERE id_lib = #{idLib}
		ORDER BY id_bcs DESC
	</select>
	
	<!-- 장서점검 도서 입력 -->
	<insert id="insertBcl" parameterType="com.gaimit.mlm.model.BookCheckModel" useGeneratedKeys="true" keyProperty="idBcl">
		INSERT INTO book_check_list (
			id_bcs, input_barcode, id_book_held, check_result, check_ip
		) VALUES (
			#{idBcs}, #{inputBarcode}, #{idBookHeld}, #{checkResult}, #{checkIp}
		)
	</insert>
	
	<!-- book check list 장서점검 실목록 출력 -->
	<select id="selectBclList" parameterType="com.gaimit.mlm.model.BookCheckModel" resultMap="bookCheck">
		SELECT
			id_bcl, id_bcs, input_barcode, id_book_held, check_result, check_ip,
			local_id_barcode, title, writer, publisher, book_shelf
		FROM book_check_list c
		LEFT OUTER JOIN book_held h ON h.id = c.id_book_held
		WHERE id_bcs = #{idBcs}
		ORDER BY id_bcl ASC
	</select>
	
	<!-- book check list 장서점검 바로 입력한 아이템 출력 -->
	<select id="selectBclItemByInputBarcode" parameterType="com.gaimit.mlm.model.BookCheckModel" resultMap="bookCheck">
		SELECT
			id_bcl, id_bcs, input_barcode, id_book_held, check_result, check_ip,
			local_id_barcode, title, writer, publisher, book_shelf
		FROM book_check_list c
		LEFT OUTER JOIN book_held h ON h.id = c.id_book_held
		WHERE id_bcs = #{idBcs}
			AND id_bcl = #{idBcl}
		ORDER BY id_bcl DESC
		LIMIT 1
	</select>
	
	<!-- 전체 도서수 확인 book check status 첨에 만들때 한번, 전체 도서수 체크함.-->
	<select id="selectWholeCount" parameterType="com.gaimit.mlm.model.BookCheckModel" resultType="int">
		SELECT
			COUNT(id)
		FROM book_held
		WHERE library_id_lib = #{idLib}
			AND (available = 0 OR available = 1)
	</select>
	
	<!-- 전체 대출중인 도서수 확인, book check status 첨에 만들때 한번 대출중인 전체 도서 체크 -->
	<select id="selectBrwedCount" parameterType="com.gaimit.mlm.model.BookCheckModel" resultType="int">
		SELECT
			COUNT(id_brw)
		FROM borrow
		WHERE id_lib_brw = #{idLib}
			AND (end_date_brw is NULL OR end_date_brw = '')
	</select>
	
	<!-- book held list 도서 전체 목록 출력 -->
	<select id="selectBookHeldList" parameterType="com.gaimit.mlm.model.BookCheckModel" resultMap="bookCheck">
		SELECT
			id, title, writer, publisher, sorting_index, local_id_barcode, rf_id, copy_code
		FROM book_held
		WHERE library_id_lib = #{idLib}
			AND (available = 0 OR available = 1)
		ORDER BY id ASC
	</select>
	
	<!-- 점검 수 +1 -->
	<update id="updateCheckedCount" parameterType="com.gaimit.mlm.model.BookCheckModel">
		UPDATE book_check_status SET checked_count=checked_count+1
			WHERE id_bcs=#{idBcs}
				AND id_lib=#{idLib}
	</update>
	
	<!-- inputBarcode 값의 도서가 존재하는지 count 체크 -->
	<select id="existBookCheckCount" parameterType="com.gaimit.mlm.model.BookCheckModel" resultType="int">
		SELECT
			COUNT(id)
		FROM book_held
		WHERE (library_id_lib = #{idLib} AND (available = 0 OR available = 1))
			AND (
				local_id_barcode=#{inputBarcode}
				OR (
					sorting_index=#{inputBarcode} AND LENGTH(sorting_index) = LENGTH(#{inputBarcode})
				)
			)
	</select>
	
	<!-- inputBarcode 값의 도서 정보 호출 -->
	<!-- LENGTH 조건이 들어간이유, 00000020 도 숫자 20으로 인식함
	따라서 기입된 갯수까지 같은 것으로 판별하여야함. -->
	<select id="selectIdBookHeldByInputBarcode" parameterType="com.gaimit.mlm.model.BookCheckModel" resultType="int">
		SELECT
			id
		FROM book_held
		WHERE (library_id_lib = #{idLib} AND (available = 0 OR available = 1))
			AND (
				local_id_barcode=#{inputBarcode} 
				OR (
					sorting_index=#{inputBarcode} AND LENGTH(sorting_index) = LENGTH(#{inputBarcode})
				)
			)
	</select>
	
	<!-- 중복 도서인지 체크 ************** 바코드 번호로 중복 확인 대체-->
	<select id="selectRedupCountInBcl" parameterType="com.gaimit.mlm.model.BookCheckModel" resultType="int">
		SELECT
			COUNT(id_bcl)
		FROM book_check_list c
		INNER JOIN book_held h ON h.id = c.id_book_held
		WHERE id_bcs = #{idBcs}
			AND local_id_barcode = #{localIdBarcode}
	</select>
	
	<!-- idbookHeld 정보를 이용하여 그 도서의 정확한 바코드(등록번호) 값 가져오기 -->
	<select id="selectBarcodeByIdBookHeld" parameterType="com.gaimit.mlm.model.BookCheckModel" resultType="string">
		SELECT
			local_id_barcode
		FROM book_held
		WHERE library_id_lib = #{idLib}
			AND id = #{idBookHeld}
	</select>
	
	<!-- bookheld id를 이용하여, 해당도서가 대출중인지 확인 -->
	<select id="selectBrwedCheck" parameterType="com.gaimit.mlm.model.BookCheckModel" resultType="int">
		SELECT
			COUNT(id_brw)
		FROM borrow
		WHERE id_lib_brw = #{idLib}
			AND (end_date_brw is NULL OR end_date_brw = '')
			AND book_held_id = #{idBookHeld}
	</select>
	
	<!-- 현재 점검 status 상태 가져오기 -->
	<select id="selectCurrentBookCheckStatus" parameterType="com.gaimit.mlm.model.BookCheckModel" resultMap="bookCheck">
		SELECT
			id_bcs, id_lib, check_date, whole_count, checked_count, confirm_count, redup_count,
			brwed_count, rented_checked_count, unreg_count, unchecked_count
		FROM book_check_status
		WHERE id_lib = #{idLib}
			AND id_bcs = #{idBcs}
		LIMIT 1
	</select>
	
	<!-- bookCheckStatus를 제거하기 위해, 참조되어있는 bookCheckList 삭제 -->
	<delete id="deleteBclByBcs" parameterType="com.gaimit.mlm.model.BookCheckModel">
		DELETE FROM book_check_list
		WHERE id_bcs = #{idBcs}
	</delete>
	
	<!-- bookCheckStatus를 제거 -->
	<delete id="deleteBcs" parameterType="com.gaimit.mlm.model.BookCheckModel">
		DELETE FROM book_check_status
		WHERE id_bcs = #{idBcs}
			AND id_lib = #{idLib}
	</delete>
	
	<!-- 중복체크 도서 +1 -->
	<update id="updateRedupCount" parameterType="com.gaimit.mlm.model.BookCheckModel">
		UPDATE book_check_status SET redup_count=redup_count+1
			WHERE id_bcs=#{idBcs}
				AND id_lib=#{idLib}
	</update>
	
	<!-- 정상확인 도서 점검 +1 -->
	<update id="updateConfirmCount" parameterType="com.gaimit.mlm.model.BookCheckModel">
		UPDATE book_check_status SET confirm_count = confirm_count+1
			WHERE id_bcs=#{idBcs}
				AND id_lib=#{idLib}
	</update>
	
	<!-- 발견된 대출중 도서 업데이트 이건 +1 아니고, 그때마다 값 받아서 기입 -->
	<update id="updateRentedCheckedCount" parameterType="com.gaimit.mlm.model.BookCheckModel">
		UPDATE book_check_status SET rented_checked_count = #{rentedCheckedCount}
			WHERE id_bcs=#{idBcs}
	</update>
	
	<!-- 미등록 점검 +1 -->
	<update id="updateUnregCount" parameterType="com.gaimit.mlm.model.BookCheckModel">
		UPDATE book_check_status SET unreg_count = unreg_count+1
			WHERE id_bcs=#{idBcs}
				AND id_lib=#{idLib}
	</update>
	
	<!-- 미점검 도서 -1 이건 마이너스다!!!!!!!!!!!! -->
	<update id="updateUncheckedCountMinus" parameterType="com.gaimit.mlm.model.BookCheckModel">
		UPDATE book_check_status SET unchecked_count = unchecked_count-1
			WHERE id_bcs=#{idBcs}
				AND id_lib=#{idLib}
	</update>
	
	<!-- 미점검 도서목록 여기엔, 대출중인 도서 목록도 포함. -->
	<select id="selectUncheckedBookInBcs" parameterType="com.gaimit.mlm.model.BookCheckModel" resultMap="bookCheck">
		SELECT local_id_barcode,
		title, writer, publisher, book_shelf
		FROM book_held h
		LEFT OUTER JOIN book_check_list c
		ON (c.id_book_held = h.id and c.id_bcs=#{idBcs})
		WHERE c.id_book_held IS NULL
		 AND h.library_id_lib = #{idLib}
		 AND (available = 0 OR available = 1)
	</select>
	
	<!-- 미점검 도서수 구하기 대출중인도서 포함되어있음.
	점검status 생성시 사용. 생성시, idBcs가 필요한데, Bcs가 없음.
	이건 아직 직접적으로 사용중은 아님.
	 -->
	<select id="selectUncheckedBookCountInBcs" parameterType="com.gaimit.mlm.model.BookCheckModel" resultType="int">
		SELECT COUNT(id)
		FROM book_held h
		LEFT OUTER JOIN book_check_list c
		ON (c.id_book_held = h.id and c.id_bcs=#{idBcs})
		WHERE c.id_book_held IS NULL
		 AND h.library_id_lib = #{idLib}
		 AND (available = 0 OR available = 1)
	</select>
	
	<!-- 미점검 도서목록 대출중인 도서는 빼고! -->
	<select id="selectUncheckedBookExceptRentedBook" parameterType="com.gaimit.mlm.model.BookCheckModel" resultMap="bookCheck">
		SELECT id, local_id_barcode,
		title, writer, publisher, book_shelf
		FROM book_held h
		LEFT OUTER JOIN book_check_list c
			ON (c.id_book_held = h.id and c.id_bcs=#{idBcs})
		LEFT OUTER JOIN borrow r
			ON r.book_held_id = h.id
		WHERE c.id_book_held IS NULL
		 AND h.library_id_lib = #{idLib}
		 AND (available = 0 OR available = 1)
		 AND NOT h.id IN (
				SELECT book_held_id FROM borrow
				WHERE end_date_brw IS NULL
			)
		GROUP BY id
		ORDER BY id ASC
	</select>
	
	<!-- 전체 대출 도서 목록 여기 작업중.  -->
	<select id="selectWholeBrwedBookList" parameterType="com.gaimit.mlm.model.BookCheckModel" resultMap="bookCheck">
		SELECT
			id, local_id_barcode,
			title, writer, publisher, book_shelf
		FROM borrow r
		INNER JOIN book_held h ON h.id = r.book_held_id
		WHERE id_lib_brw = #{idLib}
			AND (end_date_brw is NULL OR end_date_brw = '')
	</select>
	
	
	
	<!-- 점검 정상상태 도서 목록 여기서 checkResult 조건 값만 바꿔주면
		다른 목록도 가져올 수 있음. 따라서 이거 하나로 다른 몇개 목록도 가능.
		확인, 중복점검도서, 미등록도서, 발견된대출중도서-->
	<select id="selectNormalBookList" parameterType="com.gaimit.mlm.model.BookCheckModel" resultMap="bookCheck">
		SELECT
			id_bcl, id_bcs, input_barcode, id_book_held, check_result, check_ip,
			local_id_barcode, title, writer, publisher, book_shelf
		FROM book_check_list c
		LEFT OUTER JOIN book_held h ON h.id = c.id_book_held
		WHERE id_bcs = #{idBcs}
			AND check_result = #{checkResult}
		<if test="'대출중도서'.equals(checkResult)">
			GROUP BY local_id_barcode
		</if>
		ORDER BY id_bcl ASC
	</select>
	
	<!-- 타입별 도서 목록 개수 구하기. -->
	<select id="selectTypedCount" parameterType="com.gaimit.mlm.model.BookCheckModel" resultType="int">
		SELECT
			COUNT(id_bcl)
		FROM book_check_list c
		LEFT OUTER JOIN book_held h ON h.id = c.id_book_held
		WHERE id_bcs = #{idBcs}
			AND check_result = #{checkResult}
		<if test="'대출중도서'.equals(checkResult)">
			GROUP BY local_id_barcode
		</if>
	</select>
	
	<!-- 발견된 대출중도서 개수 구하기는 집계방식이 조금 달라서 따로 뺌.
		사용중임. -->
	<select id="selectRentedBookCount" parameterType="com.gaimit.mlm.model.BookCheckModel" resultType="int">
		SELECT COUNT(rentedCount)
		FROM (
			SELECT
				COUNT(id_book_held) AS rentedCount
			FROM book_check_list
			WHERE id_bcs = #{idBcs}
				AND check_result = "대출중도서"
			GROUP BY id_book_held
		) AS tempQ
	</select>
	
	
	
	<!-- 도서 삭제시, 장서점검 기록에 도서id 참조값 있는지 확인
	 사용은 book held edit 에서 사용-->
	
	<select id="selectBookCheckRecordByBookId" parameterType="com.gaimit.mlm.model.BookCheckModel" resultType="int">
		SELECT COUNT(id_bcl)
		FROM book_check_list
		WHERE id_book_held = #{idBookHeld}
	</select>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
</mapper>